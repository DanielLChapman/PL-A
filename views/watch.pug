extends layout

block content
	.inner
		.video-container(reactID = ''+id, order = order)

	script(src="/dist/View.bundle.js")
	script(src="https://player.vimeo.com/api/player.js")
	script(src="https://api.dmcdn.net/all.js")
	script(src="https://www.youtube.com/player_api")
	script(src="https://cdn.embed.ly/player-0.1.0.min.js")
	script( type="text/javascript").
		function nextVideo() {
			document.querySelector('.next-video-box').click();
		}
		function onPlayerStateChange(event) {
			if(event.data == 0) {            
				nextVideo()
			}
		};
		function tempFunction(type, videoInformation) {
			let player = null,
				streamableDuration = 1000;
			$('.video-switch-button').css('opacity', '0');
			$('body').css('background-color', 'black');
			$('.navbar').css('opacity', '0');
			$('.main-content').css('marginTop', '-25px');
			switch(type) {
				case ('dailymotion'):
					//- player = DM.player(document.querySelector('#player'), {
					//-     video: videoInformation,
					//-     width: "100%",
					//-     height: "100%",
					//-     params: {
					//-         autoplay: true
					//-     }
					//- });
					//- player.addEventListener('ended', function (evt) { 	
					//- 	nextVideo();
					//- } );
					break;
				case ('youtube'):
					player = new YT.Player('iframe', {
				        events: {
				          'onStateChange': onPlayerStateChange
				        }
				    });
					break;
				case ('vimeo'):
					var iframe = document.querySelector('iframe');
				    player = new Vimeo.Player(iframe);
					player.on('timeupdate', function(data) {
					  if (data.percent === 1) {
					    nextVideo();
					  }
					});
					break;
				case ('streamable'):
					var isPlaying = false;
					$('.streamable-div').html(videoInformation);
					player = new playerjs.Player($('.streamable-div > div > iframe')[0]);
					player.on('ready', function(){
							 player.play();
				    });
					player.on('play', function() {
						if(!isPlaying) {
							 player.play();
							 isPlaying = true;
						}
				     	else {
				     		nextVideo();
				     	}
					});
					break;
				default:
					break;
			}
		}